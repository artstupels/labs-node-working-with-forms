{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "#2 - Implement External User Verification with Auth0 Forms",
  "steps": [
    {
      "title": "1. Set up the MockDatabase",
      "description": "1\\. Set up the MockDatabase\n---------------------------\n\n> ***\n> ‚ö†Ô∏è Please note that we use it only for testing and development purposes, and such a workaround shouldn‚Äôt be used in production. ‚ö†Ô∏è\n> ***\n\nFor this particular Lab, we don‚Äôt want you to set up a real external database. As a workaround, we will create a **special Auth0 user** in your Auth0 Tenant and use its **app\\_metadata** to store the invitation codes. As per our design, we need to read the database during the Form flow and write to it in the Auth0 Action. To achieve this for our MockDatabase, we will use the **Auth0 integration** in Forms and will use the **Auth0 Node.js Management API client** in the Auth0 Action. Both require an M2M application in the same Auth0 tenant that is granted access to the Auth0 Management API.\n\n\n***\n\nüóíÔ∏è In this Lab, you will need to take notes, such as storing a configuration variable until required. Please store the notes in a Notepad, Stickies, VSCode, or any other text editor.\n\nHere's the convenient starter note to ensure you have all the values we require for this Lab.\n\n```yaml\n# M2M Application\n    Client ID: xxx \n    Client Secret: xxx \n    Domain: xxx \n# MockDatabase\n    User ID: xxx \n# Form\n    Form ID: xxx\n```\n\n",
      "selection": {
        "start": {
          "line": 11,
          "character": 7
        },
        "end": {
          "line": 11,
          "character": 170
        }
      },
      "line": 7
    },
    {
      "title": "1A. Create a Machine-to-Machine application",
      "description": "### 1A. Create a Machine-to-Machine application\n\nIt is required to manage our MockDatabase in the Auth0 Action and the Auth0 Form Flow. Since we are going to use a mock user‚Äôs metadata object as our database, we will need to authorize this application to read and update the Auth0 users.\n\n1.  In the **Auth0 Dashboard**, go to **Applications** > **Applications**.\n    \n2.  Click **+ Create Application**.\n    \n3.  In the name field, enter _\"M2MForForms\"_.\n\n4.  Choose the **Machine to Machine Applications** as the application type.\n    \n5.  Click **Create**.\n    \n6.  In the **Authorize Machine to Machine Application** window, select the **Auth0 Management API**.\n    \n7.  Under **Permissions**, select the `read:users` and `update:users_app_metadata` permissions.\n    \n8.  Click **Authorize**.\n    \n9.  Go to the **Settings** tab and take note of the **Domain**, **Client ID,** and **Client Secret**."
    },
    {
      "title": "1B. Create a MockDatabase user",
      "description": "### 1B. Create a MockDatabase user\n\nWe are going to create a mock user to use as our temporary database. The Auth0 user has a convenient **app\\_metadata** field, which is a JSON object and editable via the Auth0 Dashboard.\n\n1.  In the **Auth0 Dashboard**, go to **User Management** > **Users**\n    \n2.  Click **+ Create User** and select **Create via UI**.\n    \n3.  Select/enter the following values in the fields:\n    \n    *   **Connection**: Username-Password-Authentication\n        \n    *   **Email:** _‚Äú`MockDatabaseForForms@example.com`‚Äù_\n        \n        *   Username and Phone are optional\n            \n    *   **Password**: Any password that matches the password strength requirement for this connection.\n        \n4.  Click **Create**.\n    \n5.  Once the user is created, scroll down to the **App Metadata (app_metadata)** field (not the User Metadata field) and paste this JSON object (which will be used as our JSON database):\n    ***\n\n    ```json\n    { \n        \"invitation_codes\": [ \n            \"A0-1234567\", \n            \"A0-2345678\", \n            \"A0-3456789\", \n            \"A0-4567890\", \n            \"A0-5678901\" \n        ]\n    }\n    ```\n    ***\n6.  Click **Save**.\n    \n7.  Scroll up and take note of the **user_id**, which should look like `auth0|686....`"
    },
    {
      "title": "2. Create an Auth0 Form",
      "description": "2\\. Create an Auth0 Form\n------------------------\n\nHere, we will create the Auth0 Form to which users will be redirected, and that‚Äôs where they will submit the invitation code.\n\n1.  In the Auth0 Dashboard, go to **Actions** > **Forms**."
    },
    {
      "title": "2A. Create an Auth0 Vault connection",
      "description": "### 2A. Create an Auth0 Vault connection\n\nBefore creating an actual Form, we must create an **Auth0 Vault connection** that will allow us to fetch the **MockDatabase** user‚Äôs **app_metadata** during the Form completion.\n\n1.  On the Forms landing page, click on your **tenant name** in the top left corner.\n    \n2.  Click **Vault**.\n\n    ![Vault button](./.auth0/lab/guides/img/2A_1.png)\n    \n3.  Click **Add Vault Connection**.\n    \n4.  Select **Auth0** and click **Continue**.\n    \n5.  Use _‚ÄúAuth0ForFormsLab‚Äù_ as the **Connection name** and click **Continue**.\n    \n6.  Now, you need to provide the machine-to-machine application's **Tenant domain**, **Client ID**, and **Client Secret,** which you created in step **1A(9)**.\n    \n7.  Once all fields are filled, click **Add Vault Connection**.",
      "selection": {
        "start": {
          "line": 9,
          "character": 21
        },
        "end": {
          "line": 9,
          "character": 48
        }
      }
    },
    {
      "title": "2B. Create a form",
      "description": "### 2B. Create a Form\n\n1.  Go back to the Forms landing page by clicking the **Forms** button on the top navigation bar.\n    \n2.  Click **Create form**.\n    \n3.  Click **Start from scratch**.\n    \n4.  In the top left corner, you will see **Blank form** text. Click on it to **change the Form name** to _‚ÄúPrivateBetaForm‚Äù_.\n    \nNow we need to create the following diagram by adding Auth0 Forms nodes:\n\n![Complete Form Diagram](./.auth0/lab/guides/img/2B_1.png)",
      "selection": {
        "start": {
          "line": 13,
          "character": 1
        },
        "end": {
          "line": 13,
          "character": 59
        }
      }
    },
    {
      "title": "2C. The first Step node",
      "description": "### 2C. The first Step node\n\nYou will see an empty **Step** node connected to the **Start** and **Ending screen** nodes. Let‚Äôs edit it:\n\n1.  From the **Components** pane, drag and drop the **Rich text** block component on this Step node.\n\n    ![Complete Form Diagram](./.auth0/lab/guides/img/2C_1.png)\n\n    1.  In the **Block settings** pane, add the following text: _‚ÄúHeads up! This application is in private beta. Do you have the invitation code?‚Äù_ You can format it however you like!\n        \n    2.  Click **Save**.\n        \n2.  Now, drag the **Boolean** field component from the **Components** pane and drop it **between** the **Rich text** and the **Continue** button.\n\n    ![Complete Form Diagram](./.auth0/lab/guides/img/2C_2.png)\n\n    1.  In the **Field settings** pane, do the following:\n        \n        *   Select **Required**.\n            \n        *   Uncheck **Label**.\n            \n        *   Change the **ID** to _‚ÄúYES_OR_NO‚Äù._\n        \n        ![Complete Form Diagram](./.auth0/lab/guides/img/2C_3.png)\n            \n        *   Click **Save**.\n            \n3.  Click **Publish** in the top right corner to save the current Form to avoid losing the progress.",
      "selection": {
        "start": {
          "line": 6,
          "character": 5
        },
        "end": {
          "line": 6,
          "character": 63
        }
      }
    },
    {
      "title": "2D. Create a Router node",
      "description": "### 2D. Create a Router node\n\nAs our first Step node asks a user if they have an invitation code, we need to create a Router node that will route a user to the next screen based on their selected answer.\n\n1.  In the floating box at the bottom, click **Router**.\n\n    ![Click Router](./.auth0/lab/guides/img/2D_1.png)\n\n2.  Select the created Router, and the **Router settings** pane should open.\n\n3.  Under **Rules**, click **Rule 1**.\n\n4.  Change **Alias** to \"Has an invitation code?\".\n\n5.  Create a Router rule:\n\n    -   Click the **+** button (Add variable) of the first input field.\n\n    -   Select a *\"YES_OR_NO\"* field.\n\n    -   The conditional statement should be *\"is equal to\"*.\n\n    -   In the bottom field, type *\"true\"*.\n\n6.  Confirm it looks like this and then **Save,** and then **Save** again:\n\n    ![Router Rule](./.auth0/lab/guides/img/2D_2.png)\n\n7.  Now you must add the Router to the Form sequence. To do this, follow these steps:\n\n    1.  **Delete the link** between the **first Step** and the **Ending screen** nodes.\n\n        ![Delet link](./.auth0/lab/guides/img/2D_3.png)\n\n    2.  Click the **Yellow Dot** on the right side of the **first Step node (output port)** and drag it to the **Yellow Dot** on the left side of the **Router node (input port)**.\n\n        ![Connecting nodes](./.auth0/lab/guides/img/2D_4.png)\n\n8.  Our Form should look like this:\n\n    ![Form at this stage](./.auth0/lab/guides/img/2D_5.png)\n\n    Note that there are a few warnings shown, as some of our nodes don't have connections to other nodes. We will fix it later, as we need to add a few more between the Router and the Ending screen nodes.\n\n9.  Click **Publish** in the top right corner to save the current Form to avoid losing the progress."
    },
    {
      "title": "2E. Create the ‚ÄúYES‚Äù Step node",
      "description": "### 2E. Create the \"YES\" Step node\n\nLet's create a Step where a user must provide an invitation code if they've selected *\"YES\"* in the previous step.\n\n1.  In the floating box at the bottom, click **Step**.\n\n2.  Drag the **Text** field component from the **Components** pane and drop it above the **Continue** button.\n\n3.  Select the Text field component and in the **Field settings** pane, make the following changes:\n\n    -   Change the **ID** value to *\"INVITATION_CODE\"*. We can use the randomly generated ID, but for convenience, we will change it to a custom value to reference it in the next step.\n\n    -   Enable **Label**.\n\n    -   Update the **Label** value to *\"Please provide your invitation code here:\"*.\n\n    -   Enable **Required**.\n\n    -   Set **Placeholder text** to *\"A0-...\"*.\n\n    -   Set both **Min. length** and **Max. length** values to *\"10\"*.\n\n        ![Field settings](./.auth0/lab/guides/img/2E_1.png)\n\n    -   Click **Save**.\n\n4.  Drag the **Previous button** block component from the **Components** pane and drop it below the **Continue** button. This will allow a user to go to the previous screen.\n\n5.  Connect the **TOP output port** of the Router step to the **input port** of this Step component.\n\n6.  Now our Form should look like this:\n\n    ![Form at this stage](./.auth0/lab/guides/img/2E_2.png)\n\n7.  Click **Publish** in the top right corner to save the current Form to avoid losing the progress."
    },
    {
      "title": "2F. Create the ‚ÄúNO‚Äù Step node",
      "description": "### 2F. Create the \"NO\" Step node\n\nLet's create a Step a user should end on if they don't have an invitation code.\n\n1.  In the floating box at the bottom, click **Step**.\n\n2.  Drag the **Rich text** block component from the **Components** pane and drop it above the **Continue** button.\n\n3.  Select the **Rich text** component and in the **Block settings** pane, make the following changes:\n\n    -   Change the **Rich text** to: *\"Please visit our website to join the private beta version of our app.\"*.\n\n    -   Click **Save**.\n\n4.  Click on the **Continue** button, and then click the **Trash can icon** in the **Block settings** pane to delete this component. We don't need our users to continue if they don't have an invitation code.\n\n    ![Delete block](./.auth0/lab/guides/img/2F_1.png)\n\n5.  Drag the **Previous button** block component from the **Components** pane and drop it below the **Rich text** component. This will allow a user to go to the previous screen.\n\n6.  Connect the **BOTTOM output port** of the **Router node** to the **input port** of this **Step node**.\n\n7.  Our Form now looks like this:\n\n    ![Form at this stage](./.auth0/lab/guides/img/2F_2.png)\n\n8.  Click **Publish** in the top right corner to save the current Form and avoid losing progress. This is important, as we are going to create a Flow in the next steps and want to access the variables available in this Form."
    },
    {
      "title": "2G. Create a Flow node",
      "description": "### 2G. Create a Flow node\n\nWhen a user submits the invitation code, we need to check it against our database to verify that it is valid. To achieve this, we will need to use a Flow.\n\n1.  In the floating box at the bottom, click **Flow**.\n\n2.  When the Flow node is selected, the **Flow settings** pane appears on the right.\n\n3.  Here, we can select a Flow to use, but in our case, we need to click the **Create New Flow** button as we don't have any Flows yet.\n\n4.  Set the new Flow's name to *\"VERIFY_INVITATION_CODE\"* and click **Create**.\n\n    ![Flow name](./.auth0/lab/guides/img/2G_1.png)\n\n5.  Verify that this flow is now selected on the **Flow settings** page, and then click **Edit Flow**.\n\nThis will open a new **Flow Editor** tab in your browser. Let's create a Flow:\n\n1.  Just below **Start**, click the **+** icon.\n\n2.  The **List of actions** pane will open.\n\n3.  Scroll down and under the **Auth0** section, select **Get user** action.\n\n4.  When the **Get user** action is selected, update its configuration:\n\n    -   Set ID to *\"FETCH_MOCKDATABASE\"*.\n\n    -   Select **Auth0ForFormsLab** in the **Vault connection** dropdown.\n\n    -   In the **User ID** field, paste the MockDatabase user's ID that was created during step **1B(6)**.\n\n        ![Get user action](./.auth0/lab/guides/img/2G_2.png)\n\n    -   Click **Save**.\n\n5.  Click the **+** icon below the **Auth0** action.\n\n6.  Select the **If/then condition** action and create the following condition:\n\n    -   Top field: *{{actions.FETCH_MOCKDATABASE.body.app_metadata.invitation_codes}}*\n\n    -   Conditional statement: \"*includes\"*\n\n    -   Bottom field: *{{fields.INVITATION_CODE}}*\n\n        ![If/then condition](./.auth0/lab/guides/img/2G_3.png)\n\n        Note that the variables should appear highlighted, as in the screenshot above. What we do here is test whether the user-submitted **Invitation Code** exists in the array of invitation codes returned by our **MockDatabase**.\n\n    -   Click **Save**.\n\n7.  Click the **+** button under the **FALSE** path of the **If/then condition**.\n\n8.  Select the **Show error message** action.\n\n9.  In the **Error message** field, type *\"The invitation code doesn't exist!\"*.\n\n10. Click **Save**.\n\n11. Then click **Publish** to save a Flow. It should look like this:\n\n    ![Flow diagram](./.auth0/lab/guides/img/2G_4.png)\n\nNow, **go back to the Form browser tab** and ensure that the **Flow node** is configured correctly and the **VERIFY_INVITATION_CODE** flow is selected.\n\n![Verify flow](./.auth0/lab/guides/img/2G_5.png)\n\nIf it's not selected and doesn't exist in the dropdown, you might need to refresh the page and try again.\n\nNow connect the Flow node to the **\"YES\" Step node** and complete the form by linking the **Ending screen** node:\n\n1.  Click the **Yellow Dot** on the right side of the **\"YES\" Step node (output port)** and drag it to the **Yellow Dot** on the left side of the **Flow node (input port)**\n\n2.  Click the **Yellow Dot** on the right side of the **Flow node (output port)** and drag it to the **Yellow Dot** on the left side of the **Ending screen node**.\n\nNow your Form should look like this:\n\n![Form at this stage](./.auth0/lab/guides/img/2G_6.png)"
    },
    {
      "title": "2H. Get the Form ID",
      "description": "### 2H. Get the Form ID\n\nTo render a Form during the authentication flow, we must know the Form ID of the form we want to render. It looks like *\"ap_123...890\"* and you can get it two ways:\n\n-   In the **browser's address bar**, when you are on the Form editor page.\n\n    ![Web address](./.auth0/lab/guides/img/2H_1.png)\n\n-   By clicking the **<> Render** button.\n\n    ![Action sample code](./.auth0/lab/guides/img/2H_2.png)\n\nWhen you click the **<> Render** button, you will notice that it generates the sample **Auth0 Action** script, which you can copy and paste. In our case, we just need to take a note of the Form ID as we will be creating a custom Auth0 Action in the step.\n\n> ***\n> Before proceeding, ensure that you have taken note of:\n> * **Form ID**\n> ***"
    },
    {
      "title": "3. Create an Action and bind it to the Post Login trigger",
      "description": "It will handle the redirect to the Auth0 Form and back."
    },
    {
      "title": "3A. Create an Action",
      "description": "### 3A. Create an Action\n\n1.  Create an Action in the Post Login trigger.\n\n    1.  Navigate to [Auth0 Dashboard > Actions > Library](https://manage.auth0.com/#/actions/library \"https://manage.auth0.com/#/actions/library\"), then select **Create Action** > **Build from scratch**.\n\n    2.  Enter a **Name**, *\"PrivateBetaAction\"*, select the **Login / Post Login** trigger, which executes when a user successfully authenticates, choose the recommended **Runtime**, and then click **Create**.\n\n2.  Add the following script:\n\n    [PrivateBetaAction.js](./.auth0/lab/guides/code_snippets/PrivateBetaAction.js)\n\n\n    ***\n\n    ```js\n    /* To update a \"mock database\" user, we need to import the Auth0 Management API node client. */\n    const ManagementClient = require('auth0').ManagementClient\n\n    /* Adding an Action name here so we can tell that the console.log message is coming from this Action. */\n    let i = 1\n    const ActionNickname = `[AUTH0 PRIVATE BETA]`\n\n    /* This function is executed after the user is successfully authenticated.  */\n    exports.onExecutePostLogin = async (event, api) => {\n\n        /* Ensure all secret variables are configured */\n        const requiredSecrets = [`FORM_ID`, `DOMAIN`, `M2M_CLIENT_ID`, `M2M_CLIENT_SECRET`, `MOCKDATABASE_USER_ID`]\n        for (const secret of requiredSecrets) {\n            if (event.secrets[secret] === undefined) {\n                const secretErrorMsg = `The ${secret} secret variable is not defined!`\n                console.log(secretErrorMsg)\n                api.access.deny(secretErrorMsg)\n                return\n            } \n        }\n\n        /* Rendering a FORM right after the user authenticates. \n        In production, you'll likely add a condition, such as \n        \"only render a FORM if the user authenticates in the context of the specific application\". \n        For this lab, we will render a FORM for any application. */\n\n        // if (event.client.name == `PRIVATE BETA`) {\n        if (!event.user.app_metadata.isPrivateBetaUser) {\n            console.log(`${ActionNickname} ${i++} | Redirecting the user to complete the \"${event.secrets.FORM_ID}\" FORM.`)\n            api.prompt.render(event.secrets.FORM_ID)\n        } else {\n            console.log(`${ActionNickname} ${i++} | This user is already a verified PRIVATE BETA user.`)\n        }\n        // }\n\n    }\n\n    /* This function runs after the user completes the FORM, e.g., \n    it provides the correct invitation code. */\n    exports.onContinuePostLogin = async (event, api) => {\n\n        /* Here, we a variables to get the INVITATION_CODE the user has used. \n        Once the FORM is completed, the value should be returned. */\n        const { INVITATION_CODE } = event.prompt.fields\n\n        if (INVITATION_CODE) {\n\n            console.log(`${ActionNickname} ${i++} | A user submitted an invitation code: \"${INVITATION_CODE}\".`)\n            \n            /* Since the invite code was verified during the FORM execution flow, \n            we are adding the marker to the user's \"app_metadata\" so this Action doesn't \n            redirect this user to the FORM next time. */\n            api.user.setAppMetadata(\"isPrivateBetaUser\", true)\n\n            /* Since we are using the \"app_metadata\" field in our \"mock database\" user, we need to initialize \n            the Auth0 Management API Client and then use the \"Update a User\" endpoint to set the updated \n            \"app_metadata\" object, where the used invite code is removed from the array of invite codes. */\n            console.log(`${ActionNickname} ${i++} | Let's remove the used code from the array of codes.`)\n            const auth0ManagementAPI = new ManagementClient({\n                domain: event.secrets.DOMAIN,\n                clientId: event.secrets.M2M_CLIENT_ID,\n                clientSecret: event.secrets.M2M_CLIENT_SECRET\n            })\n\n            /* Now we need to fetch our MockDatabase to get a list of invitations available */\n            const fetchMockDatabase = await auth0ManagementAPI.users.get({ id: event.secrets.MOCKDATABASE_USER_ID })\n            const INVITATION_LIST = fetchMockDatabase.app_metadata.invitation_codes\n\n            /* We want to remove the used invitation code from the database now */\n            const UPDATED_INVITATION_LIST = INVITATION_LIST.filter(item => item !== INVITATION_CODE)\n            console.log(`${ActionNickname} ${i++} | Updated invitations list:\\n${JSON.stringify(UPDATED_INVITATION_LIST, null, 2)}`)\n            auth0ManagementAPI.users.update(\n                { \"id\": event.secrets.MOCKDATABASE_USER_ID },\n                { \"app_metadata\": { \"invitation_codes\": UPDATED_INVITATION_LIST } }\n            )\n\n            console.log(`${ActionNickname} ${i++} | Completed`)\n\n        } else {\n\n            api.access.deny(`${ActionNickname} ${i++} | The INVITATION_CODE wasn't returned from the Auth0 Form!`)\n\n        }\n\n    }\n    /* End of script.  */\n    ```\n    ***\n\n\n3.  Click **Deploy**.\n\nYou may have noticed in the above script that we are using variables instead of hardcoding some values, such as `api.prompt.render(event.secrets.form_id)`. This means we need to create Secrets to store the values for these variables. You need to create five secrets; their names are:\n\n1.  FORM_ID\n\n2.  DOMAIN\n\n3.  M2M_CLIENT_ID\n\n4.  M2M_CLIENT_SECRET\n\n5.  MOCKDATABASE_USER_ID\n\nHere's how you do it:\n\n1.  Click the **Key icon** on the left pane of the **Auth0 Actions editor**.\n\n    ![Secrets](./.auth0/lab/guides/img/3A_1.png)\n\n2.  Then, click the **Add Secret** button.\n\n3.  In the **Key** field type *\"FORM_ID\"*.\n\n4.  In the **Value** field, add your Form's ID, e.g., *\"ap_123...890\"*.\n\n    ![Secrets](./.auth0/lab/guides/img/3A_2.png)\n\n5.  Click **Create**.\n\n6.  Repeat for the other four variables.\n\nWhen **all five variables** are added as secrets, ensure the list looks like the one below, and then click **Deploy**.\n\n![Secrets](./.auth0/lab/guides/img/3A_3.png)",
      "selection": {
        "start": {
          "line": 11,
          "character": 5
        },
        "end": {
          "line": 11,
          "character": 83
        }
      }
    },
    {
      "title": "3B. Bind an Action to the Post Login trigger",
      "description": "### 3B. Bind an Action to the Post Login trigger\n\nOnce the Action is deployed, you must bind it to the trigger.\n\n1.  Go to [Actions > Triggers](https://manage.auth0.com/#/actions/triggers \"https://manage.auth0.com/#/actions/triggers\") in your Auth0 Dashboard.\n\n2.  Click the **post-login** trigger under **Sign Up & Login**.\n\n3.  From the **Add Action** pane, select the **Custom** tab.\n\n4.  Drag and drop the **PrivateBetaAction** between the **Start** and **Complete**:\n\n    ![Drag and drop](./.auth0/lab/guides/img/3B_1.png)\n\n5.  Click **Apply**."
    },
    {
      "title": "Run a test",
      "description": "Run a test\n--------\n\nNow, when it's all ready, let's execute our flow.\n\n1.  In the Auth0 Dashboard, go to [Authentication > Authentication Profile](https://manage.auth0.com/#/authentication-profiles \"https://manage.auth0.com/#/authentication-profiles\").\n\n2.  Click **‚ñ∑ Try** button.\n\n3.  Once the Login prompt opens, click the **Sign up** button.\n\n4.  Submit your **Email address** and **Password** to register.\n\n5.  Once the registration is successful, the Auth0 Form should be rendered.\n\n6.  Try completing it!\n\n\n\n> ***\n> You can use any of the invitation codes we keep in our MockDatabase:\n> \n> **A0-1234567, A0-2345678, A0-3456789, A0-4567890, A0-5678901**\n> ***\n\n***\n**Testing guidelines:**\n1.  Check the MockDatabase user in the Auth0 Dashboard:\n    -   See how the invitation codes are getting deleted from the app_metadata once they've been used\n    -   Add new invitation codes to the array\n\n2.  Check the user you just signed up with. Check this user's app_metadata, and you should find the \"isPrivateBetaUser\": true property, which means that the Form will not be triggered for this user again.\n    -   Try logging in with the same user to confirm that.\n    -   Try changing the \"isPrivateBetaUser\" to false and try again to repeat the Form.\n***"
    },
    {
      "title": "Expected results",
      "description": "Expected results\n----------------\n\nIf everything worked well, here's what you should see when you are completing the invitation code redemption flow that we've just designed and developed.\n\n![Form execution](./.auth0/lab/guides/img/E_1.png)\n\n### Something went wrong\n\nIf something went wrong and the flow failed at some point, here's how to self-troubleshoot the problem.\n\n1.  When debugging an Action script, you should use the [Actions Real-time Logs](https://auth0.com/docs/customize/actions/actions-real-time-logs \"https://auth0.com/docs/customize/actions/actions-real-time-logs\"), which includes all console.log output and exceptions.\n\n2.  If you run into any issues with Auth0 Forms Flows, you should check for errors in the Flows [Execution and Debugger](https://auth0.com/docs/customize/forms/flows/flow-execution-and-debugger \"https://auth0.com/docs/customize/forms/flows/flow-execution-and-debugger\").\n\n3.  For any issues during the Authentication, you should [Tenant Logs](https://auth0.com/docs/deploy-monitor/logs/view-log-events \"https://auth0.com/docs/deploy-monitor/logs/view-log-events\").\n\n4. You can also download the Form we were creating in this Lab from here [PrivateBetaFormExported.json](./.auth0/lab/guides/code_snippets/PrivateBetaFormExported.json). It's in JSON format and can be imported when you start over from **+ Create Form**"
    }
  ]
}
